#!/usr/bin/env -S pkgx +git +gum +gh +npm +jq bash

set -eo pipefail

if ! gh auth status >/dev/null 2>&1; then
  gum format <<EoMD
# error: github token required

please either:

1. log in to GitHub cli with \`gh auth login\`
2. set \`GH_TOKEN\`
EoMD
  exit 1
fi

cwd="$PWD"

gum format "# setting up…"

if [ $(uname) = "Darwin" ]; then
  outdir="$HOME/Library/Application Support"
else
  outdir="$HOME/.cache"
fi
outdir="${XDG_CACHE_HOME:-$outdir}/shx/stargazer"

if [ ! -d "$outdir" ]; then
  git clone https://github.com/pomber/stargazer --depth 1 "$outdir"
  cd "$outdir"
else
  cd "$outdir"
  git checkout main
  git pull origin main --rebase
fi
npm i

export REMOTION_GITHUB_TOKEN=$(gh auth token)

if [ -f shx-config.json ]; then
  user=$(cat shx-config.json | jq --raw-output .repoOrg)
  repo=$(cat shx-config.json | jq --raw-output .repoName)
  stars=$(cat shx-config.json | jq --raw-output .starCount)
  duration=$(cat shx-config.json | jq --raw-output .duration)
else
  duration=15
fi

gum format "# k let’s get some input values"

user=$(gum input --prompt='user or org > ' --value=${user})
repo=$(gum input --prompt='repo name > ' --value=${repo})

if [ -z "$stars" ]; then
  stars=$(gh api repos/$user/$repo --jq '.stargazers_count')
fi

stars=$(gum input --prompt='stars to stop at > ' --value=${stars})
duration=$(gum input --prompt='duration in seconds > ' --value=${duration})

cat << EoCAT >shx-config.json
{
  "repoOrg": "${user}",
  "repoName": "${repo}",
  "starCount": ${stars},
  "duration": ${duration}
}
EoCAT

npm run build -- --props="$outdir/shx-config.json"

# copy since the tool prints the filename in its output so users may try to open that one
cp out/Main.mp4 "$cwd/$user-$repo-stars.mp4"

gum format "> ./$user-$repo-stars.mp4"
